[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "countries_and_rivers",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie1",
        "description": ".vscode.prak7.zadanie1",
        "peekOfCode": "countries_and_rivers = {\n    'Қазақстан': ['Ертіс', 'Іртіш', 'Шу', 'Тобыл', 'Қарағанды'],\n    'Россия': ['Волга', 'Дон', 'Обь'],\n    'Канада': ['Святой Лаврентий', 'Маккензи'],\n    'США': ['Миссисипи', 'Колорадо', 'Колумбия'],\n    'Китай': ['Янцзы', 'Хуанхэ', 'Гань'],\n    'Бразилия': ['Амазонка', 'Парана', 'Сан-Франсиску'],\n}\n# Ен-өзен тізімін көрсетеміз\nprint('Ел мен өзендер тізімі:')",
        "detail": ".vscode.prak7.zadanie1",
        "documentation": {}
    },
    {
        "label": "commentators",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie2",
        "description": ".vscode.prak7.zadanie2",
        "peekOfCode": "commentators = set() \nwhile True:\n    comment = input() \n    if not comment: \n        break\n    name, text = comment.split(':')  \n    commentators.add(name.strip())\nprint(f'Бірегей комментатор саны: {len(commentators)}')",
        "detail": ".vscode.prak7.zadanie2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie3",
        "description": ".vscode.prak7.zadanie3",
        "peekOfCode": "n = int(input()) \nphone_book = {}  \nfor i in range(n):\n    phone, name = input().split()  \n    phone_book[name] = phone \nquery = input()  \nif query in phone_book :\n    print(phone_book[query]) \nelse:\n    print('Телефонкітапшасында жоқ')  ",
        "detail": ".vscode.prak7.zadanie3",
        "documentation": {}
    },
    {
        "label": "phone_book",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie3",
        "description": ".vscode.prak7.zadanie3",
        "peekOfCode": "phone_book = {}  \nfor i in range(n):\n    phone, name = input().split()  \n    phone_book[name] = phone \nquery = input()  \nif query in phone_book :\n    print(phone_book[query]) \nelse:\n    print('Телефонкітапшасында жоқ')  \nprint('Қосу?иа/жоқ')",
        "detail": ".vscode.prak7.zadanie3",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie3",
        "description": ".vscode.prak7.zadanie3",
        "peekOfCode": "query = input()  \nif query in phone_book :\n    print(phone_book[query]) \nelse:\n    print('Телефонкітапшасында жоқ')  \nprint('Қосу?иа/жоқ')\njauap=input()\nif jauap=='иа':\n    phone_book[query]=input(\"номер:\")\nfor name, phone in phone_book.items():",
        "detail": ".vscode.prak7.zadanie3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie4",
        "description": ".vscode.prak7.zadanie4",
        "peekOfCode": "n = int(input()) \nvacation_schedule = {} \nfor i in range(n):\n    name, day, month = input().split()\n    if name not in vacation_schedule:\n        vacation_schedule[name] = []\n    vacation_schedule[name].append(month)\nquery_month = input()\nresult = []\nfor name, months in vacation_schedule.items():",
        "detail": ".vscode.prak7.zadanie4",
        "documentation": {}
    },
    {
        "label": "vacation_schedule",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie4",
        "description": ".vscode.prak7.zadanie4",
        "peekOfCode": "vacation_schedule = {} \nfor i in range(n):\n    name, day, month = input().split()\n    if name not in vacation_schedule:\n        vacation_schedule[name] = []\n    vacation_schedule[name].append(month)\nquery_month = input()\nresult = []\nfor name, months in vacation_schedule.items():\n    if query_month in months:",
        "detail": ".vscode.prak7.zadanie4",
        "documentation": {}
    },
    {
        "label": "query_month",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie4",
        "description": ".vscode.prak7.zadanie4",
        "peekOfCode": "query_month = input()\nresult = []\nfor name, months in vacation_schedule.items():\n    if query_month in months:\n        result.append(name)\nif result:\n    print(*result)\nelse:\n    print(\"Никто не идет в отпуск в указанный месяц\")",
        "detail": ".vscode.prak7.zadanie4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": ".vscode.prak7.zadanie4",
        "description": ".vscode.prak7.zadanie4",
        "peekOfCode": "result = []\nfor name, months in vacation_schedule.items():\n    if query_month in months:\n        result.append(name)\nif result:\n    print(*result)\nelse:\n    print(\"Никто не идет в отпуск в указанный месяц\")",
        "detail": ".vscode.prak7.zadanie4",
        "documentation": {}
    },
    {
        "label": "ticket_random",
        "kind": 2,
        "importPath": "prak5.tempCodeRunnerFile",
        "description": "prak5.tempCodeRunnerFile",
        "peekOfCode": "def ticket_random():\n    ticket=set()\n    while len(ticket)<6:\n        ticket.add(random.randint(1,49))\n    return ticket\ndef issort(a):\n    b=a\n    for i in a:\n        if i==min(b):\n            print(i)",
        "detail": "prak5.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "issort",
        "kind": 2,
        "importPath": "prak5.tempCodeRunnerFile",
        "description": "prak5.tempCodeRunnerFile",
        "peekOfCode": "def issort(a):\n    b=a\n    for i in a:\n        if i==min(b):\n            print(i)\n        b.discard(min(b))\n    ''' if a==sorted(a):\n        return True\n    else:\n        return False '''",
        "detail": "prak5.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 6,
        "importPath": "prak5.zadanie1",
        "description": "prak5.zadanie1",
        "peekOfCode": "class section:\n    def __init__(self,fname,kurs):\n        self.name=fname\n        self.kurs=kurs\ndef sort(a):\n    for i in a:\n        for j in a:\n            if i.kurs<j.kurs:\n                tempk=i.kurs\n                tempn=i.name",
        "detail": "prak5.zadanie1",
        "documentation": {}
    },
    {
        "label": "sort",
        "kind": 2,
        "importPath": "prak5.zadanie1",
        "description": "prak5.zadanie1",
        "peekOfCode": "def sort(a):\n    for i in a:\n        for j in a:\n            if i.kurs<j.kurs:\n                tempk=i.kurs\n                tempn=i.name\n                i.kurs=j.kurs\n                j.kurs=tempk\n                i.name=j.name\n                j.name=tempn",
        "detail": "prak5.zadanie1",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 6,
        "importPath": "prak5.zadanie2",
        "description": "prak5.zadanie2",
        "peekOfCode": "class section:\n    def __init__(self,fname,b1,b2,b3):\n        self.name=fname\n        self.b1=b1\n        self.b2=b2\n        self.b3=b3\ndef select(a,name):\n    for i in a:\n        if i.name==name:\n            print(f\"{i.name}\\t{i.b1}\\t{i.b2}\\t{i.b3}\")",
        "detail": "prak5.zadanie2",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 2,
        "importPath": "prak5.zadanie2",
        "description": "prak5.zadanie2",
        "peekOfCode": "def select(a,name):\n    for i in a:\n        if i.name==name:\n            print(f\"{i.name}\\t{i.b1}\\t{i.b2}\\t{i.b3}\")\n            return i\ndias=[]\nn=int(input(\"n:\"))\nfor j in range(n):\n    dias.append(section(input(\"fname:\"),int(input(\"baga 1:\")),int(input(\"baga 2:\")),int(input(\"baga 3:\"))))\nd=select(dias,input(\"student name:\"))",
        "detail": "prak5.zadanie2",
        "documentation": {}
    },
    {
        "label": "ticket_random",
        "kind": 2,
        "importPath": "prak5.zadanie5",
        "description": "prak5.zadanie5",
        "peekOfCode": "def ticket_random():\n    ticket=set()\n    while len(ticket)<6:\n        ticket.add(random.randint(1,49))\n    return sorted(ticket)\nprint(ticket_random())",
        "detail": "prak5.zadanie5",
        "documentation": {}
    },
    {
        "label": "ticket_random",
        "kind": 2,
        "importPath": "prak5.zadanie6",
        "description": "prak5.zadanie6",
        "peekOfCode": "def ticket_random():\n    ticket=set()\n    while len(ticket)<6:\n        ticket.add(random.randint(1,49))\n    return ticket\ndef issort(a):\n    if a==sorted(a):\n        return True\n    else:\n        return False",
        "detail": "prak5.zadanie6",
        "documentation": {}
    },
    {
        "label": "issort",
        "kind": 2,
        "importPath": "prak5.zadanie6",
        "description": "prak5.zadanie6",
        "peekOfCode": "def issort(a):\n    if a==sorted(a):\n        return True\n    else:\n        return False\ndsa=ticket_random()\nprint(dsa)\nprint(issort(dsa))",
        "detail": "prak5.zadanie6",
        "documentation": {}
    },
    {
        "label": "create_tuple",
        "kind": 2,
        "importPath": "prak6.zadanie1",
        "description": "prak6.zadanie1",
        "peekOfCode": "def create_tuple(size, start, end):\n    return tuple(random.randint(start, end) for _ in range(size))\n# Создаем два кортежа\ntuple1 = create_tuple(10, 0, 5)\ntuple2 = create_tuple(10, -5, 0)\n# Объединяем два кортежа\ntuple3 = tuple1 + tuple2\n# Считаем количество нулей\ncount_of_zeros = tuple3.count(0)\n# Выводим результаты",
        "detail": "prak6.zadanie1",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "prak6.zadanie1",
        "description": "prak6.zadanie1",
        "peekOfCode": "tuple1 = create_tuple(10, 0, 5)\ntuple2 = create_tuple(10, -5, 0)\n# Объединяем два кортежа\ntuple3 = tuple1 + tuple2\n# Считаем количество нулей\ncount_of_zeros = tuple3.count(0)\n# Выводим результаты\nprint(\"1 кортеж: \", tuple1)\nprint(\"2 кортеж: \", tuple2)\nprint(\"Объединенный кортеж: \", tuple3)",
        "detail": "prak6.zadanie1",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "prak6.zadanie1",
        "description": "prak6.zadanie1",
        "peekOfCode": "tuple2 = create_tuple(10, -5, 0)\n# Объединяем два кортежа\ntuple3 = tuple1 + tuple2\n# Считаем количество нулей\ncount_of_zeros = tuple3.count(0)\n# Выводим результаты\nprint(\"1 кортеж: \", tuple1)\nprint(\"2 кортеж: \", tuple2)\nprint(\"Объединенный кортеж: \", tuple3)\nprint(\"Количество нулей в объединенном кортеже: \", count_of_zeros)",
        "detail": "prak6.zadanie1",
        "documentation": {}
    },
    {
        "label": "tuple3",
        "kind": 5,
        "importPath": "prak6.zadanie1",
        "description": "prak6.zadanie1",
        "peekOfCode": "tuple3 = tuple1 + tuple2\n# Считаем количество нулей\ncount_of_zeros = tuple3.count(0)\n# Выводим результаты\nprint(\"1 кортеж: \", tuple1)\nprint(\"2 кортеж: \", tuple2)\nprint(\"Объединенный кортеж: \", tuple3)\nprint(\"Количество нулей в объединенном кортеже: \", count_of_zeros)",
        "detail": "prak6.zadanie1",
        "documentation": {}
    },
    {
        "label": "count_of_zeros",
        "kind": 5,
        "importPath": "prak6.zadanie1",
        "description": "prak6.zadanie1",
        "peekOfCode": "count_of_zeros = tuple3.count(0)\n# Выводим результаты\nprint(\"1 кортеж: \", tuple1)\nprint(\"2 кортеж: \", tuple2)\nprint(\"Объединенный кортеж: \", tuple3)\nprint(\"Количество нулей в объединенном кортеже: \", count_of_zeros)",
        "detail": "prak6.zadanie1",
        "documentation": {}
    },
    {
        "label": "matryoshka",
        "kind": 5,
        "importPath": "prak6.zadanie2",
        "description": "prak6.zadanie2",
        "peekOfCode": "matryoshka = (42, (1.67, (\"hello\", (1+2j, (\"world\", ())))))\nprint(matryoshka[0],matryoshka[1][0],matryoshka[1][1][0],matryoshka[1][1][1][0],matryoshka[1][1][1][1][0])",
        "detail": "prak6.zadanie2",
        "documentation": {}
    },
    {
        "label": "week_days",
        "kind": 5,
        "importPath": "prak6.zadanie3",
        "description": "prak6.zadanie3",
        "peekOfCode": "week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nexpenses = [[] for _ in range(len(week_days))]\nfor i, day in enumerate(week_days):\n    print(f'Enter expenses for {day}:')\n    while True:\n        category = input('Enter category of expense or \"done\" to finish: ')\n        if category == 'done':\n            break\n        amount = float(input('Enter amount of expense: '))\n        expenses[i].append((category, amount))",
        "detail": "prak6.zadanie3",
        "documentation": {}
    },
    {
        "label": "expenses",
        "kind": 5,
        "importPath": "prak6.zadanie3",
        "description": "prak6.zadanie3",
        "peekOfCode": "expenses = [[] for _ in range(len(week_days))]\nfor i, day in enumerate(week_days):\n    print(f'Enter expenses for {day}:')\n    while True:\n        category = input('Enter category of expense or \"done\" to finish: ')\n        if category == 'done':\n            break\n        amount = float(input('Enter amount of expense: '))\n        expenses[i].append((category, amount))\nfor i, day in enumerate(week_days):",
        "detail": "prak6.zadanie3",
        "documentation": {}
    },
    {
        "label": "total_expenses",
        "kind": 5,
        "importPath": "prak6.zadanie3",
        "description": "prak6.zadanie3",
        "peekOfCode": "total_expenses = 0\nfor i, day in enumerate(week_days):\n    daily_expenses = sum(expense[1] for expense in expenses[i])\n    print(f'Total expenses for {day}: {daily_expenses}')\n    total_expenses += daily_expenses\nprint(f'Total expenses for the week: {total_expenses}')",
        "detail": "prak6.zadanie3",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "prak6.zadanie4",
        "description": "prak6.zadanie4",
        "peekOfCode": "students = input(\"Введите имена студентов через пробел: \").split()\n# Фильтрация имен по фрагменту \"ва\"\nfiltered_names = [name for name in students if \"ва\" in name]\n# Вывод имен через пробел\nprint(\" \".join(filtered_names))",
        "detail": "prak6.zadanie4",
        "documentation": {}
    },
    {
        "label": "filtered_names",
        "kind": 5,
        "importPath": "prak6.zadanie4",
        "description": "prak6.zadanie4",
        "peekOfCode": "filtered_names = [name for name in students if \"ва\" in name]\n# Вывод имен через пробел\nprint(\" \".join(filtered_names))",
        "detail": "prak6.zadanie4",
        "documentation": {}
    },
    {
        "label": "kazakh_to_latin",
        "kind": 2,
        "importPath": "prak6.zadanie5",
        "description": "prak6.zadanie5",
        "peekOfCode": "def kazakh_to_latin(text):\n    kazakh_latin_table = {\n        'А': 'A', 'а': 'a', 'Ә': 'Á', 'ә': 'á', 'Б': 'B', 'б': 'b', 'В': 'V', 'в': 'v', 'Г': 'G', 'г': 'g',\n        'Ғ': 'Ğ', 'ғ': 'ğ', 'Д': 'D', 'д': 'd', 'Е': 'E', 'е': 'e', 'Ё': 'Yo', 'ё': 'yo', 'Ж': 'J', 'ж': 'j',\n        'З': 'Z', 'з': 'z', 'И': 'I', 'и': 'i', 'Й': 'Ý', 'й': 'ý', 'К': 'K', 'к': 'k', 'Қ': 'Q', 'қ': 'q',\n        'Л': 'L', 'л': 'l', 'М': 'M', 'м': 'm', 'Н': 'N', 'н': 'n', 'Ң': 'Ń', 'ң': 'ń', 'О': 'O', 'о': 'o',\n        'Ө': 'Ö', 'ө': 'ö', 'П': 'P', 'п': 'p', 'Р': 'R', 'р': 'r', 'С': 'S', 'с': 's', 'Т': 'T','т':'t',\n        'У':'U','у':'u','Ұ':'Ú','ұ':'ú','Ү':' ü','ү':'ü','Ф':'F','ф':'f','Х':'H','х':'h','Һ':'H','һ':'h',\n        'Ц':'Ts','ц':'ts','Ч':'Ch','ч':'ch','Ш':'Sh','ш':'sh','Щ':'Shch','щ':'shch','ъ':',','Ы':'Y','ы':'y',\n        'ь':\"'\",'Э':'E','э':'e','Ю':'Yu','ю':'yu','Я':'Ya','я':'ya'}   ",
        "detail": "prak6.zadanie5",
        "documentation": {}
    }
]